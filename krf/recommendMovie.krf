(in-microtheory Movie-Recommender)

;;; recommendMovieName

(<== (recommendMovieName ?inputMovieName ?recommendedMovieName)
  (movieTitleString ?inputMovie ?inputMovieName)
  (movieTitleString ?recommendedMovie ?recommendedMovieName)
  (movieAdvisoryRating ?inputMovie ?rating)
  (recommendMovie ?recommendedMovie)
  (similarMovie ?inputMovie ?recommendedMovie ?rating)
  (different ?inputMovie ?recommendedMovie)
)

(<== (recommendMovieName ?inputMovieName ?recommendedMovieName ?rating)
  (movieTitleString ?inputMovie ?inputMovieName)
  (movieTitleString ?recommendedMovie ?recommendedMovieName)
  (recommendMovie ?recommendedMovie)
  (similarMovie ?inputMovie ?recommendedMovie ?rating)
  (different ?inputMovie ?recommendedMovie)
)

;;; recommendMovie

(<== (recommendMovie ?recommendedMovie)
  (fanFavorite ?recommendedMovie)
)

(<== (recommendMovie ?recommendedMovie)
  (criticFavorite ?recommendedMovie)
)

(<== (recommendMovie ?recommendedMovie)
  (academyFavorite ?recommendedMovie)
)

(<== (recommendMovie ?recommendedMovie)
  (oldies ?recommendedMovie)
)

(<== (recommendMovie ?recommendedMovie)
  (hiddenGems ?recommendedMovie)
)

(<== (recommendMovie ?recommendedMovie)
  (foreignLanguage ?recommendedMovie)
)

;;; recommendation types

(<== (criticFavorite ?criticMovie)
  (movieMetascore ?criticMovie ?score)
  (greaterThan ?score 85)
)

(<== (fanFavorite ?fanFavMovie)
  (movieImdbRating ?fanFavMovie ?score)
  (greaterThan 6.5 ?score)
  (movieImdbRatingCount ?fanFavMovie ?numRev)
  (greaterThan ?numRev 100000)
)

(<== (academyFavorite ?academyMovie)
 (movieAwardWon ?academyMovie)
)

(<== (oldies ?oldMovie)
 (movieDecade ?oldMovie ?decade)
 (lessThan ?decade 1980)
)

;;; presets: 80% minimum score, 5,000 max reviews
(<== (hiddenGems ?hiddenGemMovie)
 (movieImdbRating ?hiddenGemMovie ?score)
 (lessThan 8.0 ?score)
 (movieImdbRatingCount ?hiddenGemMovie ?numRevs)
 (greaterThan 5000 ?numRevs)
)

;(<== (newRating ?inputMovie ?newRatingMovie)
; (movieAdvisoryRating ?inputMovie)
; (different ?newRating)
;)

(<== (foreignLanguage ?foreignLanguageMovie)
 (movieLanguage ?foreignLanguageMovie ?language)
 (different ?language English)
)

;;; similarMovie

(<== (similarMovie ?inputMovie ?outputMovie ?rating)
  (sameGenre ?inputMovie ?outputMovie)
  (movieAdvisoryRating ?outputMovie ?rating)
  (sameCreator ?inputMovie ?outputMovie)
)

(<== (sameCreator ?movie1 ?movie2)
  (sameDirector ?movie1 ?movie2)
)

(<== (sameCreator ?movie1 ?movie2)
  (sameWriter ?movie1 ?movie2)
)

(<== (sameCreator ?movie1 ?movie2)
  (sameActor ?movie1 ?movie2)
)

;;; same things

(<== (sameDecade ?movie1 ?movie2)
  (movieDecade ?movie1 ?decade)
  (movieDecade ?movie2 ?decade)
)

(<== (sameGenre ?movie1 ?movie2)
  (movieGenres ?movie1 ?genre)
  (movieGenres ?movie2 ?genre)
)

(<== (sameWriter ?movie1 ?movie2)
  (movieWriter ?movie1 ?writer)
  (movieWriter ?movie2 ?writer)
)

(<== (sameActor ?movie1 ?movie2)
  (movieActors ?movie1 ?actor)
  (movieActors ?movie2 ?actor)
)

(<== (sameGenres ?movie1 ?movie2)
  (evaluate ?movieGenres1
     (TheClosedRetrievalSetOf ?genre
         (movieGenres ?movie1 ?genre)))
  (evaluate ?movieGenres2
     (TheClosedRetrievalSetOf ?genre
         (movieGenres ?movie2 ?genre)))
  (equals ?movieGenres1 ?movieGenres2))

(<== (same2Genres ?movie ?movie2)
  (movieGenres ?movie1 ?genre1)
  (movieGenres ?movie2 ?genre1)
  (movieGenres ?movie1 ?genre2)
  (movieGenres ?movie2 ?genre2)
  (different ?genre1 ?genre2)
  )

(<== (sameDirector ?movie1 ?movie2)
  (movieDirector ?movie1 ?director)
  (movieDirector ?movie2 ?director)
)

(<== (sameAdvisoryRating ?movie1 ?movie2)
  (movieAdvisoryRating ?movie1 ?rating)
  (movieAdvisoryRating ?movie2 ?rating)
)

(<== (sameActors ?movie1 ?movie2)
  (movieActors ?movie1 ?actor)
  (movieActors ?movie2 ?actor)
)

;;; (recommend ?movie ?criteria ?result)
;;; (elementOf ?c1 ?criteria)
;;; (unifies ?c1 fanFav)
;;; (fanFav ?movie ?movieList ?result)

;;; gets all of the bindings for fanFav
;;; (closedRetrieval ?result SetOf (fanFav ?movie ?movieList ?result))

;;; make sure that movie results are reasonable, be able to combine queries

;;; unifies ?something ?wholePredicate | this would allow us to compose things
